{"version":3,"file":"html-parser.js","sources":["common/html-parser.js"],"sourcesContent":["/*\r\n * HTML5 Parser By Sam Blowes\r\n *\r\n * Designed for HTML5 documents\r\n *\r\n * Original code by John Resig (ejohn.org)\r\n * http://ejohn.org/blog/pure-javascript-html-parser/\r\n * Original code by Erik Arvidsson, Mozilla Public License\r\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\r\n *\r\n * ----------------------------------------------------------------------------\r\n * License\r\n * ----------------------------------------------------------------------------\r\n *\r\n * This code is triple licensed using Apache Software License 2.0,\r\n * Mozilla Public License or GNU Public License\r\n *\r\n * ////////////////////////////////////////////////////////////////////////////\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n * use this file except in compliance with the License.  You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * ////////////////////////////////////////////////////////////////////////////\r\n *\r\n * The contents of this file are subject to the Mozilla Public License\r\n * Version 1.1 (the \"License\"); you may not use this file except in\r\n * compliance with the License. You may obtain a copy of the License at\r\n * http://www.mozilla.org/MPL/\r\n *\r\n * Software distributed under the License is distributed on an \"AS IS\"\r\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\r\n * License for the specific language governing rights and limitations\r\n * under the License.\r\n *\r\n * The Original Code is Simple HTML Parser.\r\n *\r\n * The Initial Developer of the Original Code is Erik Arvidsson.\r\n * Portions created by Erik Arvidssson are Copyright (C) 2004. All Rights\r\n * Reserved.\r\n *\r\n * ////////////////////////////////////////////////////////////////////////////\r\n *\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; either version 2\r\n * of the License, or (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * ----------------------------------------------------------------------------\r\n * Usage\r\n * ----------------------------------------------------------------------------\r\n *\r\n * // Use like so:\r\n * HTMLParser(htmlString, {\r\n *     start: function(tag, attrs, unary) {},\r\n *     end: function(tag) {},\r\n *     chars: function(text) {},\r\n *     comment: function(text) {}\r\n * });\r\n *\r\n * // or to get an XML string:\r\n * HTMLtoXML(htmlString);\r\n *\r\n * // or to get an XML DOM Document\r\n * HTMLtoDOM(htmlString);\r\n *\r\n * // or to inject into an existing document/DOM node\r\n * HTMLtoDOM(htmlString, document);\r\n * HTMLtoDOM(htmlString, document.body);\r\n *\r\n */\r\n// Regular Expressions for parsing tags and attributes\r\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\r\nvar endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\r\nvar attr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g; // Empty Elements - HTML 5\r\n\r\nvar empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr'); // Block Elements - HTML 5\r\n// fixed by xxx 将 ins 标签从块级名单中移除\r\n\r\nvar block = makeMap('a,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video'); // Inline Elements - HTML 5\r\n\r\nvar inline = makeMap('abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'); // Elements that you can, intentionally, leave open\r\n// (and which close themselves)\r\n\r\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr'); // Attributes that have their values filled in disabled=\"disabled\"\r\n\r\nvar fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected'); // Special Elements (can contain anything)\r\n\r\nvar special = makeMap('script,style');\r\nfunction HTMLParser(html, handler) {\r\n  var index;\r\n  var chars;\r\n  var match;\r\n  var stack = [];\r\n  var last = html;\r\n\r\n  stack.last = function () {\r\n    return this[this.length - 1];\r\n  };\r\n\r\n  while (html) {\r\n    chars = true; // Make sure we're not in a script or style element\r\n\r\n    if (!stack.last() || !special[stack.last()]) {\r\n      // Comment\r\n      if (html.indexOf('<!--') == 0) {\r\n        index = html.indexOf('-->');\r\n\r\n        if (index >= 0) {\r\n          if (handler.comment) {\r\n            handler.comment(html.substring(4, index));\r\n          }\r\n\r\n          html = html.substring(index + 3);\r\n          chars = false;\r\n        } // end tag\r\n\r\n      } else if (html.indexOf('</') == 0) {\r\n        match = html.match(endTag);\r\n\r\n        if (match) {\r\n          html = html.substring(match[0].length);\r\n          match[0].replace(endTag, parseEndTag);\r\n          chars = false;\r\n        } // start tag\r\n\r\n      } else if (html.indexOf('<') == 0) {\r\n        match = html.match(startTag);\r\n\r\n        if (match) {\r\n          html = html.substring(match[0].length);\r\n          match[0].replace(startTag, parseStartTag);\r\n          chars = false;\r\n        }\r\n      }\r\n\r\n      if (chars) {\r\n        index = html.indexOf('<');\r\n        var text = index < 0 ? html : html.substring(0, index);\r\n        html = index < 0 ? '' : html.substring(index);\r\n\r\n        if (handler.chars) {\r\n          handler.chars(text);\r\n        }\r\n      }\r\n    } else {\r\n      html = html.replace(new RegExp('([\\\\s\\\\S]*?)<\\/' + stack.last() + '[^>]*>'), function (all, text) {\r\n        text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1$2');\r\n\r\n        if (handler.chars) {\r\n          handler.chars(text);\r\n        }\r\n\r\n        return '';\r\n      });\r\n      parseEndTag('', stack.last());\r\n    }\r\n\r\n    if (html == last) {\r\n      throw 'Parse Error: ' + html;\r\n    }\r\n\r\n    last = html;\r\n  } // Clean up any remaining tags\r\n\r\n\r\n  parseEndTag();\r\n\r\n  function parseStartTag(tag, tagName, rest, unary) {\r\n    tagName = tagName.toLowerCase();\r\n\r\n    if (block[tagName]) {\r\n      while (stack.last() && inline[stack.last()]) {\r\n        parseEndTag('', stack.last());\r\n      }\r\n    }\r\n\r\n    if (closeSelf[tagName] && stack.last() == tagName) {\r\n      parseEndTag('', tagName);\r\n    }\r\n\r\n    unary = empty[tagName] || !!unary;\r\n\r\n    if (!unary) {\r\n      stack.push(tagName);\r\n    }\r\n\r\n    if (handler.start) {\r\n      var attrs = [];\r\n      rest.replace(attr, function (match, name) {\r\n        var value = arguments[2] ? arguments[2] : arguments[3] ? arguments[3] : arguments[4] ? arguments[4] : fillAttrs[name] ? name : '';\r\n        attrs.push({\r\n          name: name,\r\n          value: value,\r\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"') // \"\r\n\r\n        });\r\n      });\r\n\r\n      if (handler.start) {\r\n        handler.start(tagName, attrs, unary);\r\n      }\r\n    }\r\n  }\r\n\r\n  function parseEndTag(tag, tagName) {\r\n    // If no tag name is provided, clean shop\r\n    if (!tagName) {\r\n      var pos = 0;\r\n    } // Find the closest opened tag of the same type\r\n    else {\r\n        for (var pos = stack.length - 1; pos >= 0; pos--) {\r\n          if (stack[pos] == tagName) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n    if (pos >= 0) {\r\n      // Close all the open elements, up the stack\r\n      for (var i = stack.length - 1; i >= pos; i--) {\r\n        if (handler.end) {\r\n          handler.end(stack[i]);\r\n        }\r\n      } // Remove the open elements from the stack\r\n\r\n\r\n      stack.length = pos;\r\n    }\r\n  }\r\n}\r\n\r\nfunction makeMap(str) {\r\n  var obj = {};\r\n  var items = str.split(',');\r\n\r\n  for (var i = 0; i < items.length; i++) {\r\n    obj[items[i]] = true;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction removeDOCTYPE(html) {\r\n  return html.replace(/<\\?xml.*\\?>\\n/, '').replace(/<!doctype.*>\\n/, '').replace(/<!DOCTYPE.*>\\n/, '');\r\n}\r\n\r\nfunction parseAttrs(attrs) {\r\n  return attrs.reduce(function (pre, attr) {\r\n    var value = attr.value;\r\n    var name = attr.name;\r\n\r\n    if (pre[name]) {\r\n\t\t\tpre[name] = pre[name] + \" \" + value;\r\n    } else {\r\n\t\t\tpre[name] = value;\r\n    }\r\n\r\n    return pre;\r\n  }, {});\r\n}\r\n\r\nfunction parseHtml(html) {\r\n  html = removeDOCTYPE(html);\r\n  var stacks = [];\r\n  var results = {\r\n    node: 'root',\r\n    children: []\r\n  };\r\n  HTMLParser(html, {\r\n    start: function start(tag, attrs, unary) {\r\n      var node = {\r\n        name: tag\r\n      };\r\n\r\n      if (attrs.length !== 0) {\r\n        node.attrs = parseAttrs(attrs);\r\n      }\r\n\r\n      if (unary) {\r\n        var parent = stacks[0] || results;\r\n\r\n        if (!parent.children) {\r\n          parent.children = [];\r\n        }\r\n\r\n        parent.children.push(node);\r\n      } else {\r\n        stacks.unshift(node);\r\n      }\r\n    },\r\n    end: function end(tag) {\r\n      var node = stacks.shift();\r\n      if (node.name !== tag) console.error('invalid state: mismatch end tag');\r\n\r\n      if (stacks.length === 0) {\r\n        results.children.push(node);\r\n      } else {\r\n        var parent = stacks[0];\r\n\r\n        if (!parent.children) {\r\n          parent.children = [];\r\n        }\r\n\r\n        parent.children.push(node);\r\n      }\r\n    },\r\n    chars: function chars(text) {\r\n      var node = {\r\n        type: 'text',\r\n        text: text\r\n      };\r\n\r\n      if (stacks.length === 0) {\r\n        results.children.push(node);\r\n      } else {\r\n        var parent = stacks[0];\r\n\r\n        if (!parent.children) {\r\n          parent.children = [];\r\n        }\r\n\r\n        parent.children.push(node);\r\n      }\r\n    },\r\n    comment: function comment(text) {\r\n      var node = {\r\n        node: 'comment',\r\n        text: text\r\n      };\r\n      var parent = stacks[0];\r\n\r\n      if (!parent.children) {\r\n        parent.children = [];\r\n      }\r\n\r\n      parent.children.push(node);\r\n    }\r\n  });\r\n  return results.children;\r\n}\r\n\r\nexport default parseHtml;\r\n"],"names":["text","match","attr","uni"],"mappings":"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"}